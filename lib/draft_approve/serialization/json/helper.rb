module DraftApprove
  module Serialization
    module Json
      class Helper
        # Constants to define the hash keys used to point to associations
        # (these are similar to how ActiveRecord polymorphic associations work)
        #
        # IMPORTANT NOTE: These constants are written to the database, so cannot be
        # updated without requiring a migration of existing draft data. Such a
        # migration may be very slow, since these constants are embedded in the
        # JSON generated by this serializer!
        TYPE = 'type'.freeze
        ID = 'id'.freeze

        def self.all_assocation_attribute_names(klass)
          klass.reflect_on_all_associations.map(&:name).map(&:to_s)
        end

        def self.belongs_to_association_attribute_names(klass)
          klass.reflect_on_all_associations(:belongs_to).map(&:name).map(&:to_s)
        end

        def self.non_association_attribute_names(klass)
          association_component_attribute_names = klass.reflect_on_all_associations(:belongs_to).map do |assoc|
            [assoc.foreign_type, assoc.foreign_key, assoc.association_foreign_key]
          end.flatten.uniq.compact

          klass.attribute_names - association_component_attribute_names
        end
      end
    end
  end
end
